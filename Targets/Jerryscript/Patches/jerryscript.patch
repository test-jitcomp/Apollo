diff --git a/jerry-main/CMakeLists.txt b/jerry-main/CMakeLists.txt
index 8caa71a5..38f33bb9 100644
--- a/jerry-main/CMakeLists.txt
+++ b/jerry-main/CMakeLists.txt
@@ -64,7 +64,7 @@ endif()
 
 # Jerry standalones
 if(JERRY_CMDLINE)
-  jerry_create_executable("jerry" "main-desktop.c" "arguments/options.c" "arguments/cli.c")
+  jerry_create_executable("jerry" "main-desktop.c" "arguments/options.c" "arguments/cli.c" "main-fuzzilli.c")
   target_link_libraries("jerry" jerry-ext jerry-port)
 endif()
 
diff --git a/jerry-main/arguments/options.c b/jerry-main/arguments/options.c
index abaa91d8..78bbf403 100644
--- a/jerry-main/arguments/options.c
+++ b/jerry-main/arguments/options.c
@@ -50,6 +50,7 @@ typedef enum
   OPT_NO_PROMPT,
   OPT_CALL_ON_EXIT,
   OPT_USE_STDIN,
+  OPT_REPRL_FUZZILLI,
 } main_opt_id_t;
 
 /**
@@ -101,6 +102,7 @@ static const cli_opt_t main_opts[] = {
                .meta = "STRING",
                .help = "invoke the specified function when the process is just about to exit"),
   CLI_OPT_DEF (.id = OPT_USE_STDIN, .opt = "", .help = "read from standard input"),
+  CLI_OPT_DEF (.id = OPT_REPRL_FUZZILLI, .longopt = "reprl-fuzzilli", .help = "use only with the fuzzilli reprl library"),
   CLI_OPT_DEF (.id = CLI_OPT_DEFAULT, .meta = "FILE", .help = "input JS file(s)")
 };
 
@@ -371,6 +373,11 @@ main_parse_args (int argc, /**< argc */
         arguments_p->option_flags |= OPT_FLAG_USE_STDIN;
         break;
       }
+      case OPT_REPRL_FUZZILLI:
+      {
+        arguments_p->option_flags |= OPT_FLAG_REPRL_FUZZILLI;
+        break;
+      }
       case CLI_OPT_DEFAULT:
       {
         main_source_t *source_p = arguments_p->sources_p + arguments_p->source_count;
diff --git a/jerry-main/arguments/options.h b/jerry-main/arguments/options.h
index a3ef0b31..5e39474a 100644
--- a/jerry-main/arguments/options.h
+++ b/jerry-main/arguments/options.h
@@ -37,6 +37,7 @@ typedef enum
   OPT_FLAG_NO_PROMPT = (1 << 3),
   OPT_FLAG_USE_STDIN = (1 << 4),
   OPT_FLAG_TEST262_OBJECT = (1u << 5),
+  OPT_FLAG_REPRL_FUZZILLI = (1u << 6),
 } main_option_flags_t;
 
 /**
diff --git a/jerry-main/main-desktop.c b/jerry-main/main-desktop.c
index 3c321c96..14cace04 100644
--- a/jerry-main/main-desktop.c
+++ b/jerry-main/main-desktop.c
@@ -22,6 +22,7 @@
 #include "jerryscript.h"
 
 #include "arguments/options.h"
+#include "main-fuzzilli.h"
 #include "jerryscript-ext/debugger.h"
 #include "jerryscript-ext/handlers.h"
 #include "jerryscript-ext/print.h"
@@ -80,7 +81,7 @@ main_init_debugger (main_args_t *arguments_p) /**< main arguments */
 /**
  * Inits the engine and the debugger
  */
-static void
+void
 main_init_engine (main_args_t *arguments_p) /**< main arguments */
 {
   jerry_init (arguments_p->init_flags);
@@ -121,6 +122,11 @@ main (int argc, char **argv)
     return arguments.parse_result;
   }
 
+  if (arguments.option_flags &= OPT_FLAG_REPRL_FUZZILLI) {
+    // Fuzzilli handles its own setup; just completely defer to it.
+    return main_run_fuzzilli(&arguments);
+  }
+
 restart:
   main_init_engine (&arguments);
   int return_code = JERRY_STANDALONE_EXIT_CODE_FAIL;
diff --git a/jerry-main/main-fuzzilli.c b/jerry-main/main-fuzzilli.c
new file mode 100644
index 00000000..c7021986
--- /dev/null
+++ b/jerry-main/main-fuzzilli.c
@@ -0,0 +1,333 @@
+#include "main-fuzzilli.h"
+
+#include <assert.h>
+#include <fcntl.h>
+#include <errno.h>
+#include <stdint.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <unistd.h>
+#include <sys/stat.h>
+#include <sys/wait.h>
+#include <sys/mman.h>
+
+#include "jerryscript.h"
+#include "jerryscript-ext/properties.h"
+#include "jerryscript-ext/print.h"
+#include "jerryscript-port.h"
+
+#define REPRL_CRFD 100
+#define REPRL_CWFD 101
+#define REPRL_DRFD 102
+#define REPRL_DWFD 103
+
+#define SHM_SIZE 0x100000
+#define MAX_EDGES ((SHM_SIZE - 4) * 8)
+
+#ifndef DCHECK
+#define DCHECK(condition) { assert(condition); abort(); }
+#endif
+
+#ifndef CHECK
+#define CHECK DCHECK
+#endif
+
+extern void
+main_init_engine (main_args_t *arguments_p);
+
+struct shmem_data {
+    uint32_t num_edges;
+    unsigned char edges[];
+};
+
+struct shmem_data* __shmem;
+uint32_t *__edges_start, *__edges_stop;
+
+void __sanitizer_cov_reset_edgeguards() {
+    uint32_t N = 0;
+    for (uint32_t *x = __edges_start; x < __edges_stop && N < MAX_EDGES; x++)
+        *x = ++N;
+}
+
+void __sanitizer_cov_trace_pc_guard_init(uint32_t *start, uint32_t *stop) {
+    // Avoid duplicate initialization
+    if (start == stop || *start)
+        return;
+
+    if (__edges_start != NULL || __edges_stop != NULL) {
+        fprintf(stderr, "Coverage instrumentation is only supported for a single module\n");
+        _exit(-1);
+    }
+
+    __edges_start = start;
+    __edges_stop = stop;
+
+    // Map the shared memory region
+    const char* shm_key = getenv("SHM_ID");
+    if (!shm_key) {
+        puts("[COV] no shared memory bitmap available, skipping");
+        __shmem = (struct shmem_data*) malloc(SHM_SIZE);
+    } else {
+        int fd = shm_open(shm_key, O_RDWR, S_IRUSR | S_IWUSR);
+        if (fd <= -1) {
+            fprintf(stderr, "Failed to open shared memory region: %s\n", strerror(errno));
+            _exit(-1);
+        }
+
+        __shmem = (struct shmem_data*) mmap(0, SHM_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);
+        if (__shmem == MAP_FAILED) {
+            fprintf(stderr, "Failed to mmap shared memory region\n");
+            _exit(-1);
+        }
+    }
+
+    __sanitizer_cov_reset_edgeguards();
+
+    __shmem->num_edges = (uint32_t) (stop - start);
+    printf("[COV] edge counters initialized. Shared memory: %s with %u edges\n", shm_key, __shmem->num_edges);
+}
+
+void __sanitizer_cov_trace_pc_guard(uint32_t *guard) {
+    // There's a small race condition here: if this function executes in two threads for the same
+    // edge at the same time, the first thread might disable the edge (by setting the guard to zero)
+    // before the second thread fetches the guard value (and thus the index). However, our
+    // instrumentation ignores the first edge (see libcoverage.c) and so the race is unproblematic.
+    uint32_t index = *guard;
+    __shmem->edges[index / 8] |= 1 << (index % 8);
+    *guard = 0;
+}
+
+// We have to assume that the fuzzer will be able to call this function e.g. by
+// enumerating the properties of the global object and eval'ing them. As such
+// this function is implemented in a way that requires passing some magic value
+// as first argument (with the idea being that the fuzzer won't be able to
+// generate this value) which then also acts as a selector for the operation
+// to perform.
+jerry_value_t
+jerryx_handler_fuzzilli (const jerry_call_info_t *call_info_p, /**< call information */
+                         const jerry_value_t args_p[], /**< function arguments */
+                         const jerry_length_t args_cnt) /**< number of function arguments */
+{
+  (void) call_info_p; /* unused */
+
+  printf("Handling exception due to fuzzilli\n");
+
+  jerry_char_t operation[256] = {0};
+  jerry_value_t ret_val = jerry_undefined ();
+
+  if (args_cnt > 0 && jerry_value_is_string(args_p[0]))
+  {
+    jerry_value_t str_val;
+    str_val = jerry_value_to_string (args_p[0]);
+
+    if (!jerry_value_is_exception(str_val))
+    {
+      jerry_length_t length = jerry_string_length (str_val);
+
+      if (length > 0 && length < 256)
+      {
+        jerry_string_to_buffer(str_val, JERRY_ENCODING_UTF8, operation, length);
+      }
+    }
+
+    jerry_value_free (str_val);
+  }
+
+  printf("Operation: %s\n", operation);
+
+  if (strcmp((char *)operation, "FUZZILLI_CRASH") == 0)
+  {
+    if (args_cnt == 2 && jerry_value_is_number(args_p[1]))
+    {
+      int arg = (int) jerry_value_as_number(args_p[1]);
+      switch (arg)
+      {
+        case 0:
+          *((int*)0x41414141) = 0x1337;
+          break;
+        default:
+          DCHECK(false);
+          break;
+      }
+    }
+  }
+  else if (strcmp((char *)operation, "FUZZILLI_PRINT") == 0)
+  {
+    static FILE* fzliout;
+    fzliout = fdopen(REPRL_DWFD, "w");
+    if (!fzliout) {
+      fprintf(stderr, "Fuzzer output channel not available, printing to stdout instead\n");
+      fzliout = stdout;
+    }
+
+    /* Based on the jerryx_handler_print handler */
+    const char * const null_str = "\\u0000";
+
+    for (jerry_length_t arg_index = 1; arg_index < args_cnt; arg_index++)
+    {
+      jerry_value_t str_val;
+
+      if (jerry_value_is_symbol (args_p[arg_index]))
+      {
+        str_val = jerry_symbol_descriptive_string (args_p[arg_index]);
+      }
+      else
+      {
+        str_val = jerry_value_to_string (args_p[arg_index]);
+      }
+
+      if (jerry_value_is_exception (str_val))
+      {
+        /* There is no need to free the undefined value. */
+        ret_val = str_val;
+        break;
+      }
+
+      jerry_length_t length = jerry_string_length (str_val);
+      jerry_length_t substr_pos = 0;
+      jerry_char_t substr_buf[256];
+
+      do
+      {
+        jerry_value_t substr_val = jerry_string_substr(str_val, substr_pos, length);
+        jerry_size_t substr_size = jerry_string_to_buffer (substr_val,
+                                                           JERRY_ENCODING_UTF8,
+                                                           substr_buf,
+                                                           256 - 1);
+
+        jerry_char_t *buf_end_p = substr_buf + substr_size;
+
+        /* Update start position by the number of utf-8 characters. */
+        for (jerry_char_t *buf_p = substr_buf; buf_p < buf_end_p; buf_p++)
+        {
+          /* Skip intermediate utf-8 octets. */
+          if ((*buf_p & 0xc0) != 0x80)
+          {
+            substr_pos++;
+          }
+        }
+
+        if (substr_pos == length)
+        {
+          *buf_end_p++ = (arg_index < args_cnt - 1) ? ' ' : '\n';
+        }
+
+        for (jerry_char_t *buf_p = substr_buf; buf_p < buf_end_p; buf_p++)
+        {
+          char chr = (char) *buf_p;
+
+          if (chr != '\0')
+          {
+            putc (chr, fzliout);
+            continue;
+          }
+
+          for (jerry_size_t null_index = 0; null_str[null_index] != '\0'; null_index++)
+          {
+            putc (null_str[null_index], fzliout);
+          }
+        }
+      }
+      while (substr_pos < length);
+
+      jerry_value_free (str_val);
+    }
+
+    if (args_cnt == 0 || jerry_value_is_exception (ret_val))
+    {
+      putc ('\n', fzliout);
+    }
+    fflush(fzliout);
+  }
+  return ret_val;
+}
+
+int main_run_fuzzilli(main_args_t* arguments) {
+  char helo[] = "HELO";
+  if (write(REPRL_CWFD, helo, 4) != 4 ||
+    read(REPRL_CRFD, helo, 4) != 4) {
+    _exit(-1);
+  }
+
+  if (memcmp(helo, "HELO", 4) != 0) {
+    jerry_port_log("Invalid response from parent");
+    _exit(-1);
+  }
+
+  while (1) {
+    main_init_engine(arguments);
+    jerryx_register_global ("fuzzilli", jerryx_handler_fuzzilli);
+
+    unsigned action = 0;
+    ssize_t nread = read(REPRL_CRFD, &action, 4);
+    fflush(0);
+    if (nread != 4 || action != 0x63657865) { // 'exec'
+      fprintf(stderr, "Unknown action %x\n", action);
+      _exit(-1);
+    }
+
+    size_t script_size = 0;
+    read(REPRL_CRFD, &script_size, 8);
+
+    char* buf = malloc(script_size + 1);
+
+    char* source_buffer_tail = buf;
+    ssize_t remaining = (ssize_t) script_size;
+    while (remaining > 0) {
+      ssize_t rv = read(REPRL_DRFD, source_buffer_tail, (size_t) remaining);
+      if (rv <= 0) {
+        fprintf(stderr, "Failed to load script\n");
+        _exit(-1);
+      }
+      remaining -= rv;
+      source_buffer_tail += rv;
+    }
+
+    buf[script_size] = '\0';
+
+    if (!jerry_validate_string((jerry_char_t*) buf, (jerry_size_t) script_size, JERRY_ENCODING_UTF8)) {
+      jerry_port_log ("Error: Input must be a valid UTF-8 string.\n");
+      _exit(-1);
+    }
+
+    jerry_value_t ret_value = jerry_parse ((jerry_char_t *) buf, script_size, NULL);
+
+    // Check and execute
+    if (!jerry_value_is_exception(ret_value)) {
+      jerry_value_t func_val = ret_value;
+      ret_value = jerry_run(func_val);
+      jerry_value_free(func_val);
+    }
+
+    int is_error = jerry_value_is_exception(ret_value);
+
+    if (is_error) {
+      // The following line also releases ret_value
+      jerryx_print_unhandled_exception(ret_value);
+    } else {
+      jerry_value_free(ret_value);
+
+      ret_value = jerry_run_jobs ();
+
+      if (jerry_value_is_exception(ret_value)) {
+        jerryx_print_unhandled_exception(ret_value);
+      }
+    }
+
+    // Flush unwriteen data to avoid caching
+    fflush(stdout);
+    fflush(stderr);
+
+    jerry_cleanup();
+
+    is_error <<= 8;
+    if (write(REPRL_CWFD, &is_error, 4) != 4) {
+      _exit(1);
+    }
+    __sanitizer_cov_reset_edgeguards();
+  }
+
+  return 0;
+}
+
diff --git a/jerry-main/main-fuzzilli.h b/jerry-main/main-fuzzilli.h
new file mode 100644
index 00000000..b294204c
--- /dev/null
+++ b/jerry-main/main-fuzzilli.h
@@ -0,0 +1,8 @@
+#ifndef MAIN_FUZZILLI_H
+#define MAIN_FUZZILLI_H
+
+#include "arguments/options.h"
+
+int main_run_fuzzilli(main_args_t* arguments);
+
+#endif /* !MAIN_FUZZILLI_H */
